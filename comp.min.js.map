{"version":3,"sources":["src/comp.js"],"names":[],"mappings":"6fAAM,I,YACF,eAAc,4BACV,KAAK,UAAL,GACH,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;8DAEO,C,CAAe,C,CAAoC,IAA3B,EAA2B,wDAApB,UAAI,CAAE,CAAc,CAAZ,CAAY,2DACtD,KAAK,UAAL,CAAgB,CAAhB,EAAiC,GAAI,UAAJ,CAAc,CAAd,CAA6B,CAA7B,CAAsC,CAAtC,CAA4C,CAA5C,CACpC,C,6JAGC,U,YACF,mBAAa,CAAb,CAA4B,CAA5B,CAAqC,CAArC,CAA2C,CAA3C,CAAkD,CAC9C,mCAAqB,IAAjB,KAA2C,EAAlB,IAA7B,CACI,KAAM,IAAI,MAAJ,CAAU,6BAAV,CAAN,CAGJ,GAAe,IAAX,GAAJ,CAEI,KAAM,IAAI,MAAJ,CAAa,CAAb,qXAAN,CAGJ,KAAK,aAAL,CAAqB,CAVyB,CAY9C,GAAI,GAAQ,GAAQ,GAApB,CACI,EAAW,GAAS,EAAM,IAAf,CAAsB,EAAM,IAA5B,CAAmC,UAAM,CAAE,CAD1D,CAEI,EAAa,GAAS,EAAM,MAAf,CAAwB,EAAM,MAA9B,CAAuC,UAAM,CAAE,CAFhE,CAIA,OAAO,MAAP,CAAc,IAAd,CAAoB,KAAK,YAAL,CAAkB,EAAQ,CAAR,CAAlB,CAAkC,CAAlC,CAA8C,CAA9C,CAApB,CAhB8C,CAiB9C,EAAS,IAAT,CAAe,CAAf,CAKH,C,+EAEY,C,CAAS,C,CAAQ,C,CAAO,gBACjC,EAAO,CAAP,CADiC,CAEjC,GAAI,KAAJ,CAiBA,MAhBA,QAAO,IAAP,CAAY,CAAZ,EAAqB,GAArB,CAAyB,SAAC,CAAD,CAAY,CACjC,EAAU,CAAV,EAAoB,UAAa,+BAAT,CAAS,qCAAT,CAAS,uBAE7B,GAAI,GAAc,EAAQ,CAAR,EAAgB,KAAhB,CAAsB,CAAtB,CAA+B,CAA/B,CAAlB,CAEA;AACA;AACA;AAEI,GAAe,EAAY,IARF,EASzB,MAAK,aAAL,CAAmB,CAAnB,CAAgC,CAAhC,CATyB,CAW7B,EAAO,CAAP,CACH,CACJ,CAdD,CAcG,IAdH,CAgBA,CADA,EAAU,GAAV,CAAgB,SAAC,CAAD,QAAU,GAAM,CAAN,CAAV,CAChB,CAAO,CACV,C,oDAEa,C,CAAS,C,CAAQ,CAC3B,EACK,IADL,CACU,SAAC,CAAD,CAAiB,CACnB,GAAoB,IAAhB,GAAJ,CACI,KAAM,IAAI,MAAJ,CAAU,oCAAV,CAAN,CAEJ,EAAO,CAAP,CACH,CANL,EAOK,KAPL,CAOW,SAAC,CAAD,CAAS,CACO,QAAf,QAAO,EADC,CAER,QAAQ,KAAR,CAAc,CAAd,CAFQ,CAIR,QAAQ,KAAR,0EAEP,CAbL,CAcH,C,iBAGL,GAAI,MAAO,GAAI,KAAf,CAEsB,WAAlB,QAAO,QAAP,EAAkC,QAAQ,Q,CAM1C,OAAO,IAAP,CAAc,I,EALO,WAAjB,QAAO,OAAP,EAAgC,CAAC,OAAO,QAAxC,EAAoD,OAAO,O,GAC3D,QAAU,OAAO,OAAP,CAAiB,I,EAE/B,QAAQ,IAAR,CAAe,I","file":"comp.min.js","sourcesContent":["class Comp {\r\n    constructor() {\r\n        this.components = {};\r\n    }\r\n    // createRecorder(actions, view = ()=>{}) {\r\n    //     let path = window.location.pathname;\r\n    //     let model = {\r\n    //         pageLoadTimestamp: Date.now(),\r\n    //         steps: [],\r\n    //         components: {},\r\n    //         recording: true,\r\n    //         sessionName: path.substr(1, path.indexOf('.')-1).split('/').join('_')\r\n    //     };\r\n    //     this.recorder = new Component(\"recorder\", actions, view, model);\r\n    // }\r\n\r\n    create(componentName, actions, view = ()=>{}, model = {}) {\r\n        this.components[componentName] = new Component(componentName, actions, view, model);\r\n    }\r\n}\r\n\r\nclass Component {\r\n    constructor (componentName, actions, view, model) {\r\n        if (componentName == null || componentName === \"\") {\r\n            throw new Error(\"Your component needs a name\");\r\n        }\r\n\r\n        if (actions == null) {\r\n            const example = \"// It must be a function that takes a model and returns an object of functions, e.g.\\r\\n\\r\\nYourComponent.Actions = function (model) {\\r\\n    return {\\r\\n        sayHello: function () { console.log('Hi.'); },\\r\\n        greet: function (name) { console.log('Hello, ' + name); }\\r\\n    }\\r\\n}\";\r\n            throw new Error(`${componentName} needs some actions! Here's an example of an Actions function:\\r\\n\\r\\n${example}\\r\\n\\r\\n`);\r\n        }\r\n\r\n        this.componentName = componentName;\r\n\r\n        let _view = view && view();\r\n        let viewInit = _view && _view.init ? _view.init : () => {};\r\n        let viewRender = _view && _view.render ? _view.render : () => {};\r\n\r\n        Object.assign(this, this.componentize(actions(model), viewRender, model));\r\n        viewInit(this, model);\r\n\r\n        // if (componentizer.recorder && componentName !== \"recorder\") {\r\n        //     componentizer.recorder.storeComponent(this, model);\r\n        // }\r\n    }\r\n\r\n    componentize(actions, render, model) {\r\n        render(model);\r\n        let component = {};\r\n        Object.keys(actions).map((action) => {\r\n            component[action] = (...args) => {\r\n\r\n                let returnValue = actions[action].apply(actions, args);\r\n\r\n                // if (componentizer.recorder && componentName !== \"recorder\" && componentizer.recorder.get(\"recording\")) {\r\n                //     componentizer.recorder.recordStep(componentName, model, action, args);\r\n                // }\r\n\r\n                if (returnValue && returnValue.then) {\r\n                    this.handlePromise(returnValue, render);\r\n                }\r\n                render(model);\r\n            }\r\n        }, this);\r\n        component.get = (prop) => model[prop];\r\n        return component;\r\n    }\r\n\r\n    handlePromise(promise, render) {\r\n        promise\r\n            .then((updatedModel)=> {\r\n                if (updatedModel == null) {\r\n                    throw new Error(\"No model received: aborting render\");\r\n                }\r\n                render(updatedModel);\r\n            })\r\n            .catch((err) => {\r\n                if (typeof err === \"string\") {\r\n                    console.error(err);\r\n                } else {\r\n                    console.error(`Error unhandled by component. Add a catch handler to your AJAX method.`);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nlet comp = new Comp();\r\n\r\nif (typeof exports != 'undefined' && !exports.nodeType) {\r\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\r\n        exports = module.exports = comp;\r\n    }\r\n    exports.comp = comp;\r\n} else {\r\n    window.comp = comp;\r\n}"]}