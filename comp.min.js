/* ____ ____ _  _ ___   
*  |___ [__] |\/| |--' . v1.1.1
* 
* A design pattern and micro-framework for creating UI components
*
* Copyright Brendan Jefferis and other contributors
* Released under the MIT license
* 
* Issues? Please visit https://github.com/brendan-jefferis/comp/issues
*
* Date: 2016-12-31T09:58:19.387Z 
*/
(function(e,n){typeof exports==="object"&&typeof module!=="undefined"?module.exports=n():typeof define==="function"&&define.amd?define(n):e.comp=n()})(this,function(){"use strict";function e(e){var r=document.querySelector("[data-component="+e.name+"]");if(r===null){return e}Object.keys(Event.prototype).map(function(o,i){if(i>=10&&i<=19){r.addEventListener(o.toLowerCase(),function(r){var o=n(r);var i=t(r,o);if(e[i.name]==null){return}if(i.args===""){e[i.name]()}else{e[i.name].apply(i,i.args)}})}},this);return e}function n(e){e=e||window.event;return e.target||e.srcElement}function t(e,n){var t=n.getAttribute("data-"+[e.type])||"";return{name:r(t),args:o(t,n)}}function r(e){var n=e.match(/[^(]*/);return n?n[0]:""}function o(e,n){var t=/\(\s*([^)]+?)\s*\)/.exec(e);if(!t||t[1]==null){return""}t=t[1].split(/\s*,\s*/).map(function(e){var t=e.split(".");if(t.length===1&&t.indexOf("this")===-1){return e}var r=t.indexOf("dataset")===1?Object.assign({},n.dataset):null;return r?r[t[2]]:n[t[1]]},n);return t}var i=Object.freeze({registerEventDelegator:e,getEventTarget:n,getEventActionFromElement:t,extractActionName:r,extractArguments:o});var a=new window.DOMParser;var u="text/html";var f="application/xhtml+xml";var c="<i></i>";var l="HTML";var d=false;var s=false;
// Check if browser supports text/html DOMParser
try{/* istanbul ignore next: Fails in older browsers */
if(a.parseFromString(c,u))d=true}catch(e){}try{/* istanbul ignore next: Only used in ie9 */
if(!d&&a.parseFromString(c,f))s=true}catch(e){}/**
 * Returns the results of a DOMParser as an HTMLElement.
 * (Shims for older browser and IE9).
 */
var m=d?function e(n,t){var r=a.parseFromString(n,u);return t===l?r.documentElement:r.body.firstChild}:function e(n,t){var r=t===l;
// Special case for ie9 (documentElement.innerHTML not supported).
if(s&&r){return a.parseFromString(n,f).documentElement}
// Fallback to innerHTML for other older browsers.
var o=document.implementation.createHTMLDocument("");if(r){o.documentElement.innerHTML=n;return o.documentElement}else{o.body.innerHTML=n;return o.body.firstChild}};var v=m;var p="_set-dom-";var h=p+"index";var g=p+"mounted";var y=window.Node.ELEMENT_NODE;var E=window.Node.DOCUMENT_NODE;b.KEY="data-key";b.IGNORE="data-ignore";b.CHECKSUM="data-checksum";var N=b;/**
 * @description
 * Updates existing dom to match a new dom.
 *
 * @param {Node} prev - The html entity to update.
 * @param {String|Node} next - The updated html(entity).
 */
function b(e,n){
// Ensure a realish dom node is provided.
_(e&&e.nodeType,"You must provide a valid node to update.");
// Alias document element with document.
if(e.nodeType===E)e=e.documentElement;
// If a string was provided we will parse it as dom.
if(typeof n==="string")n=v(n,e.nodeName);
// Update the node.
w(e,n);
// Trigger mount events on initial set.
if(!e[g]){e[g]=true;T(e)}}/**
 * @private
 * @description
 * Updates a specific htmlNode and does whatever it takes to convert it to another one.
 *
 * @param {Node} prev - The previous HTMLNode.
 * @param {Node} next - The updated HTMLNode.
 */
function w(e,n){if(e.nodeType===n.nodeType){
// Handle regular element node updates.
if(e.nodeType===y){
// Ignore elements if their checksum matches.
if(S(e)===S(n))return;
// Ignore elements that explicity choose not to be diffed.
if(M(e)&&M(n))return;
// Update all children (and subchildren).
C(e,e.childNodes,n.childNodes);
// Update the elements attributes / tagName.
if(e.nodeName===n.nodeName){
// If we have the same nodename then we can directly update the attributes.
x(e,e.attributes,n.attributes)}else{
// Otherwise clone the new node to use as the existing node.
var t=n.cloneNode();
// Copy over all existing children from the original node.
while(e.firstChild)t.appendChild(e.firstChild);
// Replace the original node with the new one with the right tag.
e.parentNode.replaceChild(t,e)}}else{
// Handle other types of node updates (text/comments/etc).
// If both are the same type of node we can update directly.
if(e.nodeValue!==n.nodeValue){e.nodeValue=n.nodeValue}}}else{
// we have to replace the node.
j(e);e.parentNode.replaceChild(n,e);T(n)}}/**
 * @private
 * @description
 * Utility that will update one list of attributes to match another.
 *
 * @param {Node} parent - The current parentNode being updated.
 * @param {NamedNodeMap} prev - The previous attributes.
 * @param {NamedNodeMap} next - The updated attributes.
 */
function x(e,n,t){var r,o,i,a,u;
// Remove old attributes.
for(r=n.length;r--;){o=n[r];a=o.namespaceURI;u=o.localName;i=t.getNamedItemNS(a,u);if(!i)n.removeNamedItemNS(a,u)}
// Set new attributes.
for(r=t.length;r--;){o=t[r];a=o.namespaceURI;u=o.localName;i=n.getNamedItemNS(a,u);if(!i){
// Add a new attribute.
t.removeNamedItemNS(a,u);n.setNamedItemNS(o)}else if(i.value!==o.value){
// Update existing attribute.
i.value=o.value}}}/**
 * @private
 * @description
 * Utility that will update one list of childNodes to match another.
 *
 * @param {Node} parent - The current parentNode being updated.
 * @param {NodeList} prevChildNodes - The previous children.
 * @param {NodeList} nextChildNodes - The updated children.
 */
function C(e,n,t){var r,o,i,a,u;
// Convert nodelists into a usuable map.
var f=O(n);var c=O(t);
// Remove old nodes.
for(r in f){if(c[r])continue;
// Trigger custom dismount event.
j(f[r]);
// Remove child from dom.
e.removeChild(f[r])}
// Set new nodes.
for(r in c){o=f[r];i=c[r];
// Extract the position of the new node.
a=i[h];if(o){
// Update an existing node.
w(o,i);
// Check if the node has moved in the tree.
if(o[h]===a)continue;
// Get the current element at the new position.
/* istanbul ignore next */
u=n[a]||null;// TODO: figure out if || null is needed.
// Check if the node has already been properly positioned.
if(u===o)continue;
// Reposition node.
e.insertBefore(o,u)}else{
// Get the current element at the new position.
u=n[a]||null;
// Append the new node at the correct position.
e.insertBefore(i,u);
// Trigger custom mounted event.
T(i)}}}/**
 * @private
 * @description
 * Converts a nodelist into a keyed map.
 * This is used for diffing while keeping elements with 'data-key' or 'id' if possible.
 *
 * @param {NodeList} childNodes - The childNodes to convert.
 * @return {Object}
 */
function O(e){var n={};var t=e.length;var r;for(var o=0;o<t;o++){r=e[o];r[h]=o;n[A(r)||o]=r}return n}/**
 * @private
 * @description
 * Utility to try to pull a key out of an element.
 * Uses 'data-key' if possible and falls back to 'id'.
 *
 * @param {Node} node - The node to get the key for.
 * @return {String}
 */
function A(e){if(e.nodeType!==y)return;var n=e.getAttribute(b.KEY)||e.id;if(n)n=p+n;return n&&p+n}/**
 * @private
 * @description
 * Utility to try to pull a checksum attribute from an element.
 * Uses 'data-checksum' or user specified checksum property.
 *
 * @param {Node} node - The node to get the checksum for.
 * @return {String|NaN}
 */
function S(e){return e.getAttribute(b.CHECKSUM)||NaN}/**
 * @private
 * @description
 * Utility to try to check if an element should be ignored by the algorithm.
 * Uses 'data-ignore' or user specified ignore property.
 *
 * @param {Node} node - The node to check if it should be ignored.
 * @return {Boolean}
 */
function M(e){return e.getAttribute(b.IGNORE)!=null}/**
 * Recursively trigger a mount event for a node and it's children.
 *
 * @param {Node} node - the initial node to be mounted.
 */
function T(e){
// Trigger mount event for this element if it has a key.
if(A(e))H(e,"mount");
// Mount all children.
var n=e.firstChild;while(n){T(n);n=n.nextSibling}}/**
 * Recursively trigger a dismount event for a node and it's children.
 *
 * @param {Node} node - the initial node to be dismounted.
 */
function j(e){
// Dismount all children.
var n=e.firstChild;while(n){j(n);n=n.nextSibling}
// Trigger dismount event for this element if it has a key.
if(A(e))H(e,"dismount")}/**
 * @private
 * @description
 * Create and dispatch a custom event.
 *
 * @param {Node} el - the node to dispatch the event for.
 * @param {String} type - the name of the event.
 */
function H(e,n){var t=document.createEvent("Event");var r={value:e};t.initEvent(n,false,false);Object.defineProperty(t,"target",r);Object.defineProperty(t,"srcElement",r);e.dispatchEvent(t)}/**
 * @private
 * @description
 * Confirm that a value is truthy, throws an error message otherwise.
 *
 * @param {*} val - the val to test.
 * @param {String} msg - the error message on failure.
 * @throws Error
 */
function _(e,n){if(!e)throw new Error("set-dom: "+n)}function I(e){return e&&e.__esModule?e["default"]:e}function L(e,n){return n={exports:{}},e(n,n.exports),n.exports}var k=L(function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:true});var t={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#39;","`":"&#96;"};var r=new RegExp(Object.keys(t).join("|"),"g");n["default"]=function(){var e=arguments.length<=0||arguments[0]===undefined?"":arguments[0];return String(e).replace(r,function(e){return t[e]})};e.exports=n["default"]});var D=L(function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:true});function t(e){return e&&e.__esModule?e:{default:e}}var r=k;var o=t(r);n["default"]=function(e){for(var n=arguments.length,t=Array(n>1?n-1:0),r=1;r<n;r++){t[r-1]=arguments[r]}return e.raw.reduce(function(e,n,r){var i=t[r-1];if(Array.isArray(i)){i=i.join("")}else{i=(0,o["default"])(i)}return e+i+n})};e.exports=n["default"]});var F=I(D);var P={};function R(e,n,t,r){t(r);var o={};Object.keys(n).map(function(e){o[e]=function(){for(var o=arguments.length,i=Array(o),a=0;a<o;a++){i[a]=arguments[a]}var u=n[e].apply(n,i);if(u&&u.then){U(u,t)}t(r)}},this);o.name=e;o.get=function(e){return r[e]};return o}function U(e,n){e.then(function(e){if(e==null){throw new Error("No model received: aborting render")}n(e)}).catch(function(e){if(typeof e==="string"){console.error(e)}else{console.error("Error unhandled by component. Add a catch handler to your AJAX method.")}})}function Y(n,t,r,o){if(n==null||n===""){throw new Error("Your component needs a name")}if(t==null){var a="// It must be a function that takes a model and returns an object of functions, e.g.\r\n\r\nYourComponent.Actions = function (model) {\r\n    return {\r\n        sayHello: function () { console.log('Hi.'); },\r\n        greet: function (name) { console.log('Hello, ' + name); }\r\n    }\r\n}";throw new Error(n+" needs some actions! Here's an example of an Actions function:\r\n\r\n"+a+"\r\n\r\n")}var u=r&&r();var f=u&&u.init?u.init:function(){};var c=u&&u.render?function(e){var t=u.render(e,F);if(typeof document!=="undefined"&&t){var r=document.querySelector("[data-component="+n+"]");if(r){if(r.innerHTML===""){r.innerHTML=t}else{N(r.firstElementChild,t)}}}}:function(){};var l=R(n,t(o),c,o);P[n]=l;if(typeof document!=="undefined"&&typeof i!=="undefined"){l=e(l)}f(l,o);return l}var K={components:P,create:Y};return K});
//# sourceMappingURL=comp.min.js.map