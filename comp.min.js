/* ____ ____ _  _ ___   
*  |___ [__] |\/| |--' . v1.1.1
* 
* A design pattern and micro-framework for creating UI components
*
* Copyright Brendan Jefferis and other contributors
* Released under the MIT license
* 
* Issues? Please visit https://github.com/brendan-jefferis/comp/issues
*
* Date: 2017-01-01T02:00:26.559Z 
*/
(function(e,n){typeof exports==="object"&&typeof module!=="undefined"?module.exports=n():typeof define==="function"&&define.amd?define(n):e.comp=n()})(this,function(){"use strict";function e(e){try{new Function(e)}catch(e){if(e instanceof SyntaxError){throw new SyntaxError(e)}}}function n(e){e=e||window.event;return e.target||e.srcElement}function t(e){var n=document.querySelector("[data-component="+e.name+"]");if(n===null){return e}Object.keys(Event.prototype).map(function(t,o){if(o>=10&&o<=19){n.addEventListener(t.toLowerCase(),function(t){return r(t,e,n)})}},this);return e}function r(e,t,r){var o=n(e);var a=i(e,o,r);if(a.name===""){return}if(t[a.name]==null){throw new Error("Could not find action "+a.name+" in component "+t.name)}if(a.args===""){t[a.name]()}else{t[a.name].apply(a,a.args)}}function o(n,t,r){var i=t.getAttribute("data-"+[n.type])||"";if(i!==""||t===r){try{e(i,t)}catch(e){var a=document.createElement("div");a.appendChild(t.cloneNode(false));throw new SyntaxError("\r\n\r\nElement: "+a.innerHTML+"\r\nEvent: data-"+[n.type]+"\r\nAction: "+i+"\r\n\r\n"+e)}return{name:i,element:t}}return o(n,t.parentNode,r)}function i(e,n,t){var r=o(e,n,t);return{name:a(r.name),args:u(r.name,r.element)}}function a(e){var n=e.match(/[^(]*/);return n?n[0]:""}function u(e,n){var t=/\(\s*([^)]+?)\s*\)/.exec(e);if(!t||t[1]==null){return""}t=t[1].split(/\s*,\s*/).map(function(e){var t=e.split(".");if(t.length===1&&t.indexOf("this")===-1){return e}var r=t.indexOf("dataset")===1?Object.assign({},n.dataset):null;return r?r[t[2]]:n[t[1]]},n);return t}var f=Object.freeze({registerEventDelegator:t,delegateEvent:r,bubbleUntilActionFound:o,getEventActionFromElement:i,extractActionName:a,extractArguments:u});var c=new window.DOMParser;var l="text/html";var d="application/xhtml+xml";var s="<i></i>";var m="HTML";var v=false;var p=false;
// Check if browser supports text/html DOMParser
try{/* istanbul ignore next: Fails in older browsers */
if(c.parseFromString(s,l))v=true}catch(e){}try{/* istanbul ignore next: Only used in ie9 */
if(!v&&c.parseFromString(s,d))p=true}catch(e){}/**
 * Returns the results of a DOMParser as an HTMLElement.
 * (Shims for older browser and IE9).
 */
var h=v?function e(n,t){var r=c.parseFromString(n,l);return t===m?r.documentElement:r.body.firstChild}:function e(n,t){var r=t===m;
// Special case for ie9 (documentElement.innerHTML not supported).
if(p&&r){return c.parseFromString(n,d).documentElement}
// Fallback to innerHTML for other older browsers.
var o=document.implementation.createHTMLDocument("");if(r){o.documentElement.innerHTML=n;return o.documentElement}else{o.body.innerHTML=n;return o.body.firstChild}};var y=h;var g="_set-dom-";var E=g+"index";var N=g+"mounted";var w=window.Node.ELEMENT_NODE;var b=window.Node.DOCUMENT_NODE;C.KEY="data-key";C.IGNORE="data-ignore";C.CHECKSUM="data-checksum";var x=C;/**
 * @description
 * Updates existing dom to match a new dom.
 *
 * @param {Node} prev - The html entity to update.
 * @param {String|Node} next - The updated html(entity).
 */
function C(e,n){
// Ensure a realish dom node is provided.
F(e&&e.nodeType,"You must provide a valid node to update.");
// Alias document element with document.
if(e.nodeType===b)e=e.documentElement;
// If a string was provided we will parse it as dom.
if(typeof n==="string")n=y(n,e.nodeName);
// Update the node.
S(e,n);
// Trigger mount events on initial set.
if(!e[N]){e[N]=true;_(e)}}/**
 * @private
 * @description
 * Updates a specific htmlNode and does whatever it takes to convert it to another one.
 *
 * @param {Node} prev - The previous HTMLNode.
 * @param {Node} next - The updated HTMLNode.
 */
function S(e,n){if(e.nodeType===n.nodeType){
// Handle regular element node updates.
if(e.nodeType===w){
// Ignore elements if their checksum matches.
if(j(e)===j(n))return;
// Ignore elements that explicity choose not to be diffed.
if(H(e)&&H(n))return;
// Update all children (and subchildren).
O(e,e.childNodes,n.childNodes);
// Update the elements attributes / tagName.
if(e.nodeName===n.nodeName){
// If we have the same nodename then we can directly update the attributes.
A(e,e.attributes,n.attributes)}else{
// Otherwise clone the new node to use as the existing node.
var t=n.cloneNode();
// Copy over all existing children from the original node.
while(e.firstChild)t.appendChild(e.firstChild);
// Replace the original node with the new one with the right tag.
e.parentNode.replaceChild(t,e)}}else{
// Handle other types of node updates (text/comments/etc).
// If both are the same type of node we can update directly.
if(e.nodeValue!==n.nodeValue){e.nodeValue=n.nodeValue}}}else{
// we have to replace the node.
I(e);e.parentNode.replaceChild(n,e);_(n)}}/**
 * @private
 * @description
 * Utility that will update one list of attributes to match another.
 *
 * @param {Node} parent - The current parentNode being updated.
 * @param {NamedNodeMap} prev - The previous attributes.
 * @param {NamedNodeMap} next - The updated attributes.
 */
function A(e,n,t){var r,o,i,a,u;
// Remove old attributes.
for(r=n.length;r--;){o=n[r];a=o.namespaceURI;u=o.localName;i=t.getNamedItemNS(a,u);if(!i)n.removeNamedItemNS(a,u)}
// Set new attributes.
for(r=t.length;r--;){o=t[r];a=o.namespaceURI;u=o.localName;i=n.getNamedItemNS(a,u);if(!i){
// Add a new attribute.
t.removeNamedItemNS(a,u);n.setNamedItemNS(o)}else if(i.value!==o.value){
// Update existing attribute.
i.value=o.value}}}/**
 * @private
 * @description
 * Utility that will update one list of childNodes to match another.
 *
 * @param {Node} parent - The current parentNode being updated.
 * @param {NodeList} prevChildNodes - The previous children.
 * @param {NodeList} nextChildNodes - The updated children.
 */
function O(e,n,t){var r,o,i,a,u;
// Convert nodelists into a usuable map.
var f=M(n);var c=M(t);
// Remove old nodes.
for(r in f){if(c[r])continue;
// Trigger custom dismount event.
I(f[r]);
// Remove child from dom.
e.removeChild(f[r])}
// Set new nodes.
for(r in c){o=f[r];i=c[r];
// Extract the position of the new node.
a=i[E];if(o){
// Update an existing node.
S(o,i);
// Check if the node has moved in the tree.
if(o[E]===a)continue;
// Get the current element at the new position.
/* istanbul ignore next */
u=n[a]||null;// TODO: figure out if || null is needed.
// Check if the node has already been properly positioned.
if(u===o)continue;
// Reposition node.
e.insertBefore(o,u)}else{
// Get the current element at the new position.
u=n[a]||null;
// Append the new node at the correct position.
e.insertBefore(i,u);
// Trigger custom mounted event.
_(i)}}}/**
 * @private
 * @description
 * Converts a nodelist into a keyed map.
 * This is used for diffing while keeping elements with 'data-key' or 'id' if possible.
 *
 * @param {NodeList} childNodes - The childNodes to convert.
 * @return {Object}
 */
function M(e){var n={};var t=e.length;var r;for(var o=0;o<t;o++){r=e[o];r[E]=o;n[T(r)||o]=r}return n}/**
 * @private
 * @description
 * Utility to try to pull a key out of an element.
 * Uses 'data-key' if possible and falls back to 'id'.
 *
 * @param {Node} node - The node to get the key for.
 * @return {String}
 */
function T(e){if(e.nodeType!==w)return;var n=e.getAttribute(C.KEY)||e.id;if(n)n=g+n;return n&&g+n}/**
 * @private
 * @description
 * Utility to try to pull a checksum attribute from an element.
 * Uses 'data-checksum' or user specified checksum property.
 *
 * @param {Node} node - The node to get the checksum for.
 * @return {String|NaN}
 */
function j(e){return e.getAttribute(C.CHECKSUM)||NaN}/**
 * @private
 * @description
 * Utility to try to check if an element should be ignored by the algorithm.
 * Uses 'data-ignore' or user specified ignore property.
 *
 * @param {Node} node - The node to check if it should be ignored.
 * @return {Boolean}
 */
function H(e){return e.getAttribute(C.IGNORE)!=null}/**
 * Recursively trigger a mount event for a node and it's children.
 *
 * @param {Node} node - the initial node to be mounted.
 */
function _(e){
// Trigger mount event for this element if it has a key.
if(T(e))L(e,"mount");
// Mount all children.
var n=e.firstChild;while(n){_(n);n=n.nextSibling}}/**
 * Recursively trigger a dismount event for a node and it's children.
 *
 * @param {Node} node - the initial node to be dismounted.
 */
function I(e){
// Dismount all children.
var n=e.firstChild;while(n){I(n);n=n.nextSibling}
// Trigger dismount event for this element if it has a key.
if(T(e))L(e,"dismount")}/**
 * @private
 * @description
 * Create and dispatch a custom event.
 *
 * @param {Node} el - the node to dispatch the event for.
 * @param {String} type - the name of the event.
 */
function L(e,n){var t=document.createEvent("Event");var r={value:e};t.initEvent(n,false,false);Object.defineProperty(t,"target",r);Object.defineProperty(t,"srcElement",r);e.dispatchEvent(t)}/**
 * @private
 * @description
 * Confirm that a value is truthy, throws an error message otherwise.
 *
 * @param {*} val - the val to test.
 * @param {String} msg - the error message on failure.
 * @throws Error
 */
function F(e,n){if(!e)throw new Error("set-dom: "+n)}function k(e){return e&&e.__esModule?e["default"]:e}function D(e,n){return n={exports:{}},e(n,n.exports),n.exports}var U=D(function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:true});var t={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#39;","`":"&#96;"};var r=new RegExp(Object.keys(t).join("|"),"g");n["default"]=function(){var e=arguments.length<=0||arguments[0]===undefined?"":arguments[0];return String(e).replace(r,function(e){return t[e]})};e.exports=n["default"]});var P=D(function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:true});function t(e){return e&&e.__esModule?e:{default:e}}var r=U;var o=t(r);n["default"]=function(e){for(var n=arguments.length,t=Array(n>1?n-1:0),r=1;r<n;r++){t[r-1]=arguments[r]}return e.raw.reduce(function(e,n,r){var i=t[r-1];if(Array.isArray(i)){i=i.join("")}else{i=(0,o["default"])(i)}return e+i+n})};e.exports=n["default"]});var R=k(P);var Y={};function K(e,n,t,r){t(r);var o={};Object.keys(n).map(function(e){o[e]=function(){for(var o=arguments.length,i=Array(o),a=0;a<o;a++){i[a]=arguments[a]}var u=n[e].apply(n,i);if(u&&u.then){V(u,t)}t(r)}},this);o.name=e;o.get=function(e){return r[e]};return o}function V(e,n){e.then(function(e){if(e==null){throw new Error("No model received: aborting render")}n(e)}).catch(function(e){if(typeof e==="string"){console.error(e)}else{console.error("Error unhandled by component. Add a catch handler to your AJAX method.")}})}function q(e,n,r,o){if(e==null||e===""){throw new Error("Your component needs a name")}if(n==null){var i="// It must be a function that takes a model and returns an object of functions, e.g.\r\n\r\nYourComponent.Actions = function (model) {\r\n    return {\r\n        sayHello: function () { console.log('Hi.'); },\r\n        greet: function (name) { console.log('Hello, ' + name); }\r\n    }\r\n}";throw new Error(e+" needs some actions! Here's an example of an Actions function:\r\n\r\n"+i+"\r\n\r\n")}var a=r&&r();var u=a&&a.init?a.init:function(){};var c=a&&a.render?function(n){var t=a.render(n,R);if(typeof document!=="undefined"&&t){var r=document.querySelector("[data-component="+e+"]");if(r){if(r.innerHTML===""){r.innerHTML=t}else{x(r.firstElementChild,t)}}}}:function(){};var l=K(e,n(o),c,o);Y[e]=l;if(typeof document!=="undefined"&&typeof f!=="undefined"){l=t(l)}u(l,o);return l}var B={components:Y,create:q};return B});
//# sourceMappingURL=comp.min.js.map